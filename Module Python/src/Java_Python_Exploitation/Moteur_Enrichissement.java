package Java_Python_Exploitation;


import Connections.ConnectionOrcl;
import Exceptions.BuildingException;
import Exceptions.NonExistantDansLaBDD;
import Exceptions.NonExistantDansLesInfos;
import javafx.concurrent.Service;
import javafx.concurrent.Task;

import java.io.IOException;
import java.sql.*;
import java.text.ParseException;
import java.util.HashMap;
import java.util.LinkedList;

public class Moteur_Enrichissement {

    private static final int ratio_min = 15;
    private static Connection oracle = ConnectionOrcl.getInstance ( );
    //Hashmap permettant de se souvenir de ce qui a déja été traité et de l'option avec laquelle il a été traité.
    protected static HashMap<String, Integer> isbn_processed = new HashMap<>();
    private static LinkedList <String> colonnes_existantes = new LinkedList <> ( );
    private static LinkedList <String> isbn_total = new LinkedList <> ( );
    private static Service<Moteur_Enrichissement> SM = null;
    private static boolean initialised = false;

    public static void main(String[] param) throws ParseException, SQLException, IOException, IllegalAccessException, NonExistantDansLesInfos, BuildingException, NonExistantDansLaBDD {

    }


    public Moteur_Enrichissement() throws SQLException {
        if ( !initialised ) {
            initialised = true;
            PreparedStatement PS;
            PS = oracle.prepareStatement ( "SELECT CNAME FROM SYSTEM.COL WHERE (TNAME='PRODUIT_INFO')" );
            ResultSet RS = PS.executeQuery ( );
            while (RS.next ( )) {
                colonnes_existantes.add ( RS.getString ( 1 ) );
            }
            PS = oracle.prepareStatement ( "SELECT ISBN From PRODUIT_INFO" );
            RS = PS.executeQuery ( );
            String isbn;
            int option;
            PreparedStatement S;
            ResultSet RST = null;
            while (RS.next ( )) {
                isbn = RS.getString ( 1 );
                option = 0;
                if ( colonnes_existantes.contains ( "Resume" ) ) {
                    S = oracle.prepareStatement ( "SELECT \"Resume\" FROM PRODUIT_INFO where ISBN='" + RS.getString ( 1 ) + "'" );
                    RST = S.executeQuery ( );
                    RST.next ( );
                    try {
                        if ( !RST.getString ( 1 ).equalsIgnoreCase ( "null" ) )
                            option++;
                    } catch ( NullPointerException e ) {

                    }

                    RST.close ( );
                }
                if ( colonnes_existantes.contains ( "URL" ) ) {
                    S = oracle.prepareStatement ( "SELECT \"URL\" FROM PRODUIT_INFO where ISBN='" + RS.getString ( 1 ) + "'" );
                    RST = S.executeQuery ( );
                    RST.next ( );
                    try {
                        if ( !RST.getString ( 1 ).equalsIgnoreCase ( "null" ) )
                            option++;
                    } catch ( NullPointerException e ) {
                    }
                    S.close ( );
                }
                isbn_processed.put ( isbn, option );

                RST.close ( );
            }
            RS.close ( );
            PS.close ( );

        }
    }

    public static void Reset() throws SQLException {
        PreparedStatement PS;
        PS = oracle.prepareStatement ( "DROP TABLE PRODUIT_INFO" );
        PS.executeQuery ( );
        PS = oracle.prepareStatement ( "CREATE TABLE PRODUIT_INFO\n" +
                "(\n" +
                "  ISBN VARCHAR2(15)\n" +
                ")" );
        PS.executeQuery ( );
        isbn_processed.clear ( );
        colonnes_existantes.clear ( );
    }

    public  HashMap<String, String> Enrichir(String isbn, int option) throws SQLException {
        PreparedStatement PS;
        HashMap<String, String> information_telecharges = new HashMap<>();
        if (!isbn_processed.containsKey(isbn))
        {
            if(option<2) {
                information_telecharges = Recherche_API(isbn);
                if (information_telecharges!= null && information_telecharges.size() > 0) {
                    return information_telecharges;
                }
            }
            return Recherche_Web(isbn,option);
        }
        if (isbn_processed.containsKey(isbn)) {
            if (isbn_processed.get(isbn) == 2) {
                return Recherche_BDD(isbn);
            } else {
                if (isbn_processed.get(isbn) < option)
                    return Recherche_Web(isbn, option);
                else
                    return Recherche_BDD(isbn);
            }
        }
        return null;
    }

    private HashMap<String, String> Recherche_BDD(String isbn) throws SQLException {
        System.out.println("Recherche BDD");
        PreparedStatement PS;
        HashMap<String, String> information_telecharges = new HashMap<>();
        PS = oracle.prepareStatement("SELECT * FROM PRODUIT_INFO WHERE ISBN = '" + isbn + "'");
        ResultSet RS = PS.executeQuery();
        RS.next();
        ResultSetMetaData RSM = RS.getMetaData();
        for (int i = 1; i < RSM.getColumnCount(); i++) {
            information_telecharges.put(RSM.getColumnName(i), RS.getString(i));
        }
        return information_telecharges;
    }


    private HashMap<String, String> Recherche_Web(String isbn, int option) {
        System.out.println("Recherche Web avec option = " + option);
        HashMap <String, String> information_telecharges = new HashMap <> ( );

        try {
            information_telecharges = PythonCaller.Renseigner ( isbn, option );
            Statement S = oracle.createStatement ( );
            ResultSet RS2 = S.executeQuery ( "SELECT ISBN FROM PRODUIT_INFO" );
            LinkedList <String> liste_isbn = new LinkedList <> ( );
            while (RS2.next ( )) {
                liste_isbn.add ( RS2.getString ( 1 ) );
            }
            if ( !liste_isbn.contains ( isbn ) && information_telecharges.keySet ( ).contains ( "Titre" ) ) {
                S = oracle.createStatement ( );
                S.executeUpdate ( "INSERT INTO PRODUIT_INFO(ISBN) VALUES('" + isbn + "')" );
            }
            for (String s : information_telecharges.keySet ( )) {
                if ( s.equalsIgnoreCase ( "ISBN" ) )
                    continue;
                if ( !colonnes_existantes.contains ( s ) ) {
                    S = oracle.createStatement ( );
                    S.executeUpdate ( "ALTER TABLE PRODUIT_INFO ADD \"" + s + "\" VARCHAR2(3500)" );
                    //System.out.println ( "ALTER TABLE PRODUIT_INFO ADD \"" + s + "\" VARCHAR2(3500)" );
                    colonnes_existantes.add ( s );
                }
                if ( !s.equalsIgnoreCase ( "ISBN" ) ) {
                    S.executeUpdate ( "UPDATE PRODUIT_INFO SET \"" + s.trim ( ) + "\" = '" + information_telecharges.get ( s ).replace ( "'", " " ) + "' " +
                            "WHERE \"ISBN\"='" + isbn + "'" );
                   // System.out.println ( "UPDATE PRODUIT_INFO SET \"" + s.trim ( ) + "\" = '" + information_telecharges.get ( s ) + "' " +
                            //"WHERE \"ISBN\"='" + isbn + "'" );
                }
            }
            isbn_processed.put ( isbn, option );
            return information_telecharges;
        } catch ( IOException er ) {
            er.printStackTrace ( );
            System.out.println ( "Erreur Internet Retentative imminente "+er.getMessage() );
            Recherche_Web(isbn, option);
        } catch ( SQLException e ) {
            e.printStackTrace ( );
        }

        return null;
    }


    private HashMap<String,String> Recherche_API(String isbn){
        System.out.println("Recherche API");
        HashMap<String,String> information_telecharges;
        try {
            information_telecharges = PythonCaller.Renseigner_Google(isbn);
            if(information_telecharges.size()==0)
                return null;
            Statement S = oracle.createStatement ( );
            ResultSet RS2 = S.executeQuery ( "SELECT ISBN FROM PRODUIT_INFO" );
            LinkedList <String> liste_isbn = new LinkedList <> ( );
            while (RS2.next ( )) {
                liste_isbn.add ( RS2.getString ( 1 ) );
            }
            if ( !liste_isbn.contains ( isbn ) && information_telecharges.keySet ( ).contains ( "Titre" ) ) {
                S = oracle.createStatement ( );
                S.executeUpdate ( "INSERT INTO PRODUIT_INFO(ISBN) VALUES('" + isbn + "')" );
            }
            for (String s : information_telecharges.keySet ( )) {
                if ( s.equalsIgnoreCase ( "ISBN" ) )
                    continue;
                if ( !colonnes_existantes.contains ( s ) ) {
                    S = oracle.createStatement ( );
                    S.executeUpdate ( "ALTER TABLE PRODUIT_INFO ADD \"" + s + "\" VARCHAR2(3500)" );
                    //System.out.println ( "ALTER TABLE PRODUIT_INFO ADD \"" + s + "\" VARCHAR2(3500)" );
                    colonnes_existantes.add ( s );
                }
                if ( !s.equalsIgnoreCase ( "ISBN" ) ) {
                    S.executeUpdate ( "UPDATE PRODUIT_INFO SET \"" + s.trim ( ) + "\" = '" + information_telecharges.get ( s ).replace ( "'", " " ) + "' " +
                            "WHERE \"ISBN\"='" + isbn + "'" );
                }
            }
            isbn_processed.put ( isbn, 1 );
            return information_telecharges;
        } catch (IOException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static void Supprimer_Colonne_PI(String nom_colonne) throws SQLException {
        PreparedStatement PS;
        PS = oracle.prepareStatement ( "ALTER TABLE PRODUIT_INFO DROP COLUMN \"" + nom_colonne + "\"" );
        PS.executeQuery ( );
    }


    public static void Nettoyer_Colonnes() throws SQLException {
        Statement S;
        int nb_elem = 0;
        S = oracle.createStatement ( );
        ResultSet RS = S.executeQuery ( "SELECT COUNT(*) FROM PRODUIT_INFO" );
        while (RS.next ( )) {
            nb_elem = RS.getInt ( 1 );
        }
        RS = S.executeQuery ( "SELECT CNAME FROM SYSTEM.COL WHERE (TNAME='PRODUIT_INFO')" );
        colonnes_existantes.clear ( );
        while (RS.next ( )) {
            colonnes_existantes.add ( RS.getString ( 1 ) );
        }
        float ratio;
        for (String colonne : colonnes_existantes) {
            if ( colonne.equalsIgnoreCase ( "Resume" ) || colonne.equalsIgnoreCase ( "URL" ) )
                continue;
            RS = S.executeQuery ( "SELECT COUNT(\"" + colonne + "\") FROM PRODUIT_INFO" );
            RS.next ( );
            ratio = ( (float) RS.getInt ( 1 ) ) / nb_elem;
            if ( ratio * 100 < ratio_min ) {
                Supprimer_Colonne_PI ( colonne );
            }
        }

    }



    public void init_PyLauncher() throws IOException {
        PythonCaller.lire_interpreteur ( );
    }


    public  Service<Moteur_Enrichissement> creerService(){
        if(SM!=null)
            return SM;
        SM = new Service<Moteur_Enrichissement>() {
            @Override
            protected Task<Moteur_Enrichissement> createTask() {
                return new Task<Moteur_Enrichissement>() {
                    @Override
                    protected Moteur_Enrichissement call() throws Exception {
                        try {
                            Statement S = oracle.createStatement ( );
                            ResultSet RS = S.executeQuery ( "SELECT ISBN FROM PRODUIT" );
                            while (RS.next ( )) {
                                isbn_total.add ( RS.getString ( 1 ) );
                            }
                            for (String s : isbn_total) {
                                if ( isbn_processed.keySet ( ).contains ( s ) )
                                    continue;
                                Enrichir ( s, 2 );
                            }
                        } catch ( SQLException e ) {
                            e.printStackTrace ( );
                        }
                        return null;
                    }
                };
            }
        };
        return SM;
    }


}
