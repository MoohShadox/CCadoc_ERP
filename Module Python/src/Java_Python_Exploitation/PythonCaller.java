package Java_Python_Exploitation;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;

public class PythonCaller {

    //TODO CORRIGER LES LIENS

    public static String lien_interpreteur = "";
    //TODO Mettre le lien d'installation du projet ici
    public static String projet = "C:/CCadoc_ERP";

    public static void lire_interpreteur() throws IOException {
        File F = new File ( "config.txt" );
        DataInputStream fis = new DataInputStream ( new FileInputStream ( F ) );
        byte[] buf = new byte[100];
        char[] ch = new char[100];
        while (( fis.read ( buf ) ) >= 0) {
            int i = 0;
            for (byte c : buf) {
                ch[i] = (char) c;
                i++;
            }
            buf = new byte[8];
        }
        String ss = String.valueOf ( ch );
        lien_interpreteur = ss.split ( "\n" )[0].replace ( "\\", "/" ).trim ( );
        projet = ss.split ( "\n" )[1].trim ( );
        lien_interpreteur =projet.replace("/","\\")+"\\Enrichissement_BDD\\Module Python\\venv\\Scripts\\python.exe";
    }


    public static void main(String[] args) throws IOException {
        lire_interpreteur();
        System.out.println(Renseigner_Google("9782884741682"));
    }

    public static void installer(String lien_interpreteur1, String projet1) {
        lien_interpreteur = lien_interpreteur1;
        projet = projet1;

    }



    public static boolean test_fonctionnement() {
        try {
            String[] cmd = new String[2];
            cmd[0] = lien_interpreteur; // check version of installed python: python -V
            cmd[1] = projet + "/Enrichissement_BDD/Scriptes/Test.py";
            // create runtime to execute external command
            Runtime rt = Runtime.getRuntime ( );
            Process pr = rt.exec ( cmd );
            // retrieve output from python script
            BufferedReader bfr = new BufferedReader ( new InputStreamReader ( pr.getErrorStream ( ) ) );
            String line;
            String st = "";
            while (( line = bfr.readLine ( ) ) != null) {
                System.out.println(line);
                st = line;

            }
            return ( !st.isEmpty ( ) && st.charAt ( 0 ) == '1' );
        } catch ( Exception e ) {
            e.printStackTrace ( );
            System.out.println ( e.getMessage ( ) );
            System.out.println ( "Chemin non existant" );
            return false;
        }
    }


    public static void Extraire_FichierCSV(String liensql, String lienCSV, String nomtable) throws IOException {
        // set up the command and parameter
        String[] cmd = new String[5];
        cmd[0] = lien_interpreteur; // check version of installed python: python -V
        cmd[1] = projet + "/Enrichissement_BDD/Scriptes/Books_Extractor.py";
        cmd[2] = liensql;
        cmd[3] = lienCSV;
        cmd[4] = nomtable;
// create runtime to execute external command
        Runtime rt = Runtime.getRuntime ( );
        Process pr = rt.exec ( cmd );

// retrieve output from python script
        BufferedReader bfr = new BufferedReader ( new InputStreamReader ( pr.getErrorStream ( ) ) );
        String texte = "";
        String line = "";
        while (( line = bfr.readLine ( ) ) != null) {
            System.out.println ( line );
        }
    }

    public static HashMap <String, String> Renseigner(String isbn, int option) throws IOException {
// set up the command and parameter
        Integer o = option;
        String[] cmd = new String[4];
        cmd[0] = lien_interpreteur; // check version of installed python: python -V
        cmd[1] = projet + "Module Python/src/Interpreteur_Python/Renseigne_Moi.py";
        cmd[2] = isbn;
        cmd[3] = o.toString ( );
// create runtime to execute external command
        Runtime rt = Runtime.getRuntime ( );
        Process pr = rt.exec ( cmd );
// retrieve output from python script
        BufferedReader bfr = new BufferedReader ( new InputStreamReader ( pr.getInputStream ( ), StandardCharsets.ISO_8859_1 ) );
        String texte = "";
        String line = "";
        HashMap <String, String> informations = new HashMap <> ( );
        while (( line = bfr.readLine ( ) ) != null) {
            texte = texte + line;
            if ( line.startsWith ( "!#!" ) ) {
                line = line.replace ( "!#!", "" );
                try {
                    informations.put ( line.split ( ":::" )[0], line.split ( ":::" )[1] );
                } catch ( ArrayIndexOutOfBoundsException e ) {
                    System.out.println ( "Erreur internet retentative imminenet" );
                    return ( Renseigner ( isbn, option ) );
                }
            }
        }
        /*if(informations.containsKey("Editeur"))
        {
            informations.put("Éditeur",informations.get("Editeur"));
            informations.remove("Editeur");
        }*/
        return informations;
    }


    public static HashMap<String,String> Renseigner_Google(String isbn) throws IOException {
        String[] cmd = new String[3];
        cmd[0] = lien_interpreteur; // check version of installed python: python -V
        cmd[1] = projet + "Module Python/src/Interpreteur_Python/Renseignement_Google.py";
        cmd[2] = isbn;
        System.out.println(cmd[0]+" "+cmd[1]+" "+cmd[2]);
// create runtime to execute external command
        Runtime rt = Runtime.getRuntime ( );
        Process pr = rt.exec ( cmd );
// retrieve output from python script
        BufferedReader bfr = new BufferedReader ( new InputStreamReader ( pr.getInputStream ( ), StandardCharsets.ISO_8859_1 ) );
        String texte = "";
        String line = "";
        HashMap <String, String> informations = new HashMap <> ( );
        while (( line = bfr.readLine ( ) ) != null) {
            texte = texte + line;
            if ( line.startsWith ( "!#!" ) ) {
                line = line.replace ( "!#!", "" );
                try {
                    informations.put ( line.split ( ":::" )[0], line.split ( ":::" )[1] );
                } catch ( ArrayIndexOutOfBoundsException e ) {
                    System.out.println ( "Erreur internet retentative imminenet" );
                    return ( Renseigner_Google (isbn) );
                }
            }
        }
        /*if(!informations.containsKey("Éditeur"))
        {
            HashMap<String,String> H = Renseigner(isbn,0);
            if(H.containsKey("Éditeur"))
            {
                informations.put("Éditeur",H.get("Éditeur"));
            }
        }*/
        return informations;
    }



}